% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/samplingmethods_pt1.R
\name{ieee754_converter}
\alias{ieee754_converter}
\title{IEEE 754 Converter for Single-Precision (32-bit)}
\usage{
ieee754_converter(number, verbose = TRUE)
}
\arguments{
\item{number}{A numeric value to be converted into IEEE 754 format. It can be
any real number, including special values such as \code{NaN}, \code{Inf}, and \code{-Inf}.}

\item{verbose}{A logical value (\code{TRUE} or \code{FALSE}). If \code{TRUE}, the function
will print detailed steps explaining how the sign, exponent,
and mantissa are computed. If \code{FALSE}, no explanation is provided.}
}
\value{
A list with three components:
\itemize{
\item \code{sign}: The sign bit of the IEEE 754 representation (either "0" for positive or "1" for negative).
\item \code{exponent}: The 8-bit biased exponent in binary (as a string).
\item \code{mantissa}: The 23-bit mantissa in binary (as a string).
}

For special values like \code{NaN}, \code{Inf}, or \code{Zero}, the function returns their
corresponding IEEE 754 representations.
}
\description{
This function converts a numeric value into its IEEE 754 single-precision 32-bit
binary representation, breaking it down into its sign, exponent, and mantissa.
It also handles special values such as \strong{NaN}, \strong{Infinity}, and \strong{Zero}.
}
\examples{
# Example 1: Converting a positive number
ieee754_converter(6.25)

# Example 2: Converting a negative number
ieee754_converter(-6.25)

# Example 3: Handling NaN
ieee754_converter(NaN)

# Example 4: Handling Infinity
ieee754_converter(Inf)

# Example 5: Handling Negative Infinity
ieee754_converter(-Inf)

}
